void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Mykyta-Lystopad/homework.git"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

// vars
def container_name = "homework"
def image_path = "nominonik/google-class"
def image_part_name = "google-class"


pipeline {
    agent {
        label 'docker'
    }

    parameters {
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Write the target environment (dev or qa)')
    }


    options {
      withCredentials([
        usernamePassword(credentialsId: "docker_hub", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')
      ])
    }

    environment {
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
    }



    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        // stage('Checkout') {
        //     steps {
        //         script {
        //             echo "Checkout stage"
        //             checkout scmGit(branches: [[name: params.ENVIRONMENT]], userRemoteConfigs: [[url: 'https://github.com/Mykyta-Lystopad/homework.git']])
        //         }
        //     }
        // }

        stage('Work with git branch') {
            steps {
                script {
                    // Access the branch name using env.BRANCH_NAME (must be main)
                    echo "Work with git branch"
                    echo "Must be main"
                    echo "Current branch is: ${BRANCH_NAME}"
                    echo "Cloning repo from the branch: ${BRANCH_NAME}..."
                }
            }
        }

        stage('Tag Docker Image') {
            steps {
                script {
                    sh "docker tag ${image_path}:${params.VERSION} \
                     ${image_path}-${params.ENVIRONMENT}:${params.VERSION}-${params.ENVIRONMENT}" // google-class-2.4-201-qa or dev
                }
            }
        }

        stage('Push Docker Image to Docker Hub') { // to nominonik/google-class-dev or qa
            steps {
                script {
                    def scriptPushVar

                    scriptPushVar = "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}; \
                        docker push ${image_path}-${params.ENVIRONMENT}:${params.VERSION}-${params.ENVIRONMENT}"

                    sh(script: scriptPushVar, returnStatus: false, returnStdout: true)

                }
                    timeout(time: 7, unit: 'DAYS') {
                        input message: "Approve the deployment to ====${params.ENVIRONMENT} environment==== with version ====${params.VERSION}-${params.ENVIRONMENT}==== ?", ok: 'Deploy'
                    }

            }
        }

        stage('Deploy to Environment') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    echo "Deploying to environment: ${params.ENVIRONMENT} with version: ${params.VERSION}"

                    def containerSuffix = params.ENVIRONMENT == 'qa' ? '-qa' : '-dev'
                    def portMapping = params.ENVIRONMENT == 'qa' ? '-p 4400:4200' : '-p 4300:4200'

                    def scriptDeployingVar = """
                        docker pull ${image_path}-${params.ENVIRONMENT}:${params.VERSION}-${params.ENVIRONMENT} &&
                        
                        if docker image inspect ${container_name}${containerSuffix} &> /dev/null; then
                            echo "Image exists and deleting..."
                            docker rm -f ${container_name}${containerSuffix}
                        fi &&
                        
                        docker run -d ${portMapping} --name ${container_name}${containerSuffix} ${image_path}-${params.ENVIRONMENT}:${params.VERSION}-${params.ENVIRONMENT} npm start
                    """

                    sh(script: scriptDeployingVar, returnStatus: false, returnStdout: true)

                    echo "============= Perform sleep command for starting app in container ======================"
                    sh "sleep 40"
                }
            }
        }

        stage('Health Check') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    echo "Performing health check for environment: ${params.ENVIRONMENT}"

                    def port = params.ENVIRONMENT == 'qa' ? 4400 : 4300

                    def response_status = sh(script: "curl -sLI -w '%{http_code}' http://192.168.0.139:${port} -o /dev/null", returnStdout: true)

                    echo "response_status = ${response_status}"

                    if (response_status == '200') {
                        echo "Health check passed with response code ${response_status}."
                    } else {
                        echo "Health check failed with response code ${response_status}."
                    }
                }
            }
        

            // Use for PR status sending
            post {
                success{
                    setBuildStatus("Build succeeded", "SUCCESS");
                }

                failure {
                    setBuildStatus("Build failed", "FAILURE");
                } 

                // Sending notification to gmail
                always {
                    emailext to: "niktoring77@gmail.com",
                    subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
                    body: """
                    Logs from Jenkins pipeline:
                    ${currentBuild.rawBuild.getLog(100)}
                    """,
                    attachLog: true
                }
            }
        }
    }
}


