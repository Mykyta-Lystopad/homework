void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Mykyta-Lystopad/homework.git"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

// vars
def container_name = "homework"
def image_path = "nominonik/google-class"
def image_part_name = "google-class"


pipeline {
    agent {
        label 'docker'
    }

    parameters {
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Write the target environment')
        choice(name: 'VERSION', choices: [], description: 'Enter the version or tag of the Docker image for build image')
    }


    options {
      withCredentials([
        usernamePassword(credentialsId: "docker_hub", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')
      ])
    }



    stages {
        stage('Fetch Docker Image Tags') {
            steps {
                script {
                    def registry = 'https://registry.hub.docker.com/v2/repositories/nominonik/google-class/tags'

                    // Fetching tags from Docker Hub with authentication
                    def response = sh(script: "curl -u ${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD} -s ${registry}", returnStatus: true, returnStdout: true).trim()

                    // Check if the curl command was successful
                    if (response == 0) {
                        echo "response: ${response}"

                        // Parse the JSON response
                        def imageNames = sh(script: "echo \$response | grep -o '\"name\":\"[^\"]*\"' | cut -d':' -f2 | tr -d '\"'", returnStdout: true).trim()

                        echo "Docker Image Names: ${imageNames}"

                        echo "tags: ${tags}"

                        // Set the choices for the VERSION parameter
                        currentBuild.setBuildParameter("VERSION", tags.join('\n'))
                    } else {
                        error "Failed to fetch Docker image tags. Exit code: ${response}"
                    }
                }
            }
        }

        stage('Tag Docker Image') {
            // to do get build number
            steps {
                script {
                    sh "docker tag ${image_path}-${params.ENVIRONMENT}:latest \
                    ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}" // +qa or dev
                }
            }
        }

        stage('Push Docker Image to Docker Hub') { // to nominonik/google-class
            steps {
                script {
                    def scriptPushVar

                    scriptPushVar = "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}; \
                        docker push ${image_path}-${params.ENVIRONMENT}:latest; \
                        docker push ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}"

                    sh(script: scriptPushVar, returnStatus: false, returnStdout: true)

                    
                    // // Prompt the user to read linting message
                    // def userInput = input(
                    //     message: 'Do you want to read the linting message?',
                    //     ok: 'Yes',
                    //     parameters: [string(defaultValue: 'No', description: 'Select Yes to read the linting message', name: 'readLintMessage')]
                    // )

                    // // Handle user input
                    // if (userInput == 'Yes') {
                    //     echo "User wants to read the linting message."
                    // } else {
                    //     echo "User chose not to read the linting message."
                    // }
                }
                    // timeout(time: 7, unit: 'DAYS') {
                    //     input message: "Approve the deployment to ${params.ENVIRONMENT} environment with version latest?", ok: 'Deploy'
                    // }

            }
        }

        stage('Deploy to Environment') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    echo "Deploying to environment: ${params.ENVIRONMENT} with version: latest"
                    def scriptDeployingVar

                    scriptDeployingVar = "docker pull ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}; \
                        docker rm -f ${container_name}; \
                        docker run -d -p 4200:4200 --name ${container_name} ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION} npm start"

                    sh(script: scriptDeployingVar, returnStatus: false, returnStdout: true)

                    echo "============= perform sleep command for starting app in container ======================"
                    sh "sleep 40"
                }

            }
        }

        stage('Health Check') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    echo "Performing health check for environment: ${params.ENVIRONMENT}"

                    def response_status = sh(script: "curl -sLI -w '%{http_code}' http://192.168.0.139:4200 -o /dev/null", returnStdout: true)

                    echo "response_status = ${response_status}"

                    if (response_status == '200') {
                        echo "Health check passed with response code ${response_status}."
                    } else {
                        echo "Health check failed with response code ${response_status}."

                    }

                }

             }
        

            // Use for PR status sending
            post {
                success{
                    setBuildStatus("Build succeeded", "SUCCESS");
                }

                failure {
                    setBuildStatus("Build failed", "FAILURE");
                } 

                // Sending notification to gmail
                always {
                    emailext to: "niktoring77@gmail.com",
                    subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
                    body: """
                    Logs from Jenkins pipeline:
                    ${currentBuild.rawBuild.getLog(100)}
                    """,
                    attachLog: true
                }
            }
        }
    }    
        
}
