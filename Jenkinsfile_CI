void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Mykyta-Lystopad/homework.git"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}


// vars
// image_path - in docker hub (default folder for generel images: 1-with version and latest)
def image_path = "nominonik/google-class"
def image_part_name = "google-class"
def container_name = "homework"


pipeline {
    agent {
        label 'docker'
    }

    parameters {
        string(name: 'PUSH_VERSION', defaultValue: '2.4.3', description: 'Enter the version or tag of the Docker image for build image')
    }


    options {
      withCredentials([
        usernamePassword(credentialsId: "docker_hub", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME'),
        string(credentialsId: 'git-token-2', variable: 'TOKEN')
      ])
    }

    environment {
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
    }


    stages {

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    echo "Checkout stage"
                    checkout scmGit(branches: [[name: BRANCH_NAME]], userRemoteConfigs: [[url: 'https://github.com/Mykyta-Lystopad/homework.git']])
                }
            }
        }

        // stage('Pulling from git branch') {
        //     steps {
        //         script {
        //             // Access the branch name using env.BRANCH_NAME
        //             echo "Current branch is: ${BRANCH_NAME}"
        //             echo "Cloning repo from the branch: ${BRANCH_NAME}..."
        //         }
        //     }
        // }


        // stage('Clone Repository') {
        //     steps {
        //         dir("${container_name}_dir") {
        //             git(
        //                 url: "https://github.com/Mykyta-Lystopad/${container_name}.git",
        //                 branch: "main",
        //                 changelog: true,
        //                 poll: true
        //             )
        //         }
        //     }
        // }

        // // stage('Static Code Analysis') {
        // //     steps {
        // //         echo "Run SonarQube analysis"
        // //         withSonarQubeEnv(installationName: 'SonarQube') {
        // //             script {
        // //                 def scannerHome = tool 'SonarScanner';
        // //                 withEnv(["PATH+SONARSCANNER=${scannerHome}/bin"]) {
        // //                     sh "sonar-scanner"
        // //                 }
        // //             }
        // //         }
        // //     }
        // // }

        // stage('Build Docker Image') {
        //     steps {
        //         sh "docker build -t ${image_path}:${image_part_name}-latest ."
        //     }
           
        // }

        // stage('Tag Docker Image') {
        //     steps {
        //         script {
        //             // + docker tag nominonik/google-class:google-class-latest nominonik/google-class:google-class-2.4-201
        //             sh "docker tag ${image_path}:${image_part_name}-latest \
        //             ${image_path}:${image_part_name}-${params.PUSH_VERSION}-${env.BUILD_NUMBER}"

        //         }
        //     }
        // }

        // stage('Push Docker Image to Docker Hub') {
        //     steps {
        //         script {
        //             def scriptPushVar

        //             scriptPushVar = "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}; \
        //                 docker push ${image_path}:${image_part_name}-latest; \
        //                 docker push ${image_path}:${image_part_name}-${params.PUSH_VERSION}-${env.BUILD_NUMBER}"

        //             sh(script: scriptPushVar, returnStatus: false, returnStdout: true)
        //         }
        //     }

        // }


        stage('Trigger github current branch and block untill build will not pass success') {
            
            steps {
                echo "Trigger github"
                script {
                    echo "Trigger github..." 
                }
                
            }
            post {
                // success {
                //     script {
                //         echo "Jenkins CI pipeline succeeded."
                //         def currentSHA = env.GIT_COMMIT
                //             setBuildStatus("Build succeeded", "SUCCESS");
                //             echo """
                //                 curl -L \
                //                 -X POST \
                //                 -H "Accept: application/vnd.github+json" \
                //                 -H "Authorization: Bearer ${TOKEN}" \
                //                 -H "X-GitHub-Api-Version: 2022-11-28" \
                //                 https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                //                 -d '{"state":"success","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                //                 "description":"The build succeeded!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                //             """
                //             // Now, execute the curl command
                //             sh """
                //                 curl -L \
                //                     -X POST \
                //                     -H "Accept: application/vnd.github+json" \
                //                     -H "Authorization: Bearer ${TOKEN}" \
                //                     -H "X-GitHub-Api-Version: 2022-11-28" \
                //                     https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                //                     -d '{"state":"success","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                //                     "description":"The build succeeded!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                //             """
                //         // }
                //     }
                // }
                success {
                    script {
                        echo "Jenkins CI pipeline succeeded."
                        def currentSHA = env.GIT_COMMIT
                        def pullRequestNumber = env.CHANGE_ID

                        echo "currentSHA: ${currentSHA}"
                        echo "pullRequestNumber: ${pullRequestNumber}"

                        if (pullRequestNumber) {
                            // Merge the pull request using GitHub API
                            def mergePRCommand = """
                                curl -L \
                                -X PUT \
                                -H "Accept: application/vnd.github+json" \
                                -H "Authorization: Bearer ${TOKEN}" \
                                -H "X-GitHub-Api-Version: 2022-11-28" \
                                https://api.github.com/repos/Mykyta-Lystopad/homework/pulls/${pullRequestNumber}/merge \
                                -d '{"commit_title":"Merge pull request #${pullRequestNumber}","merge_method":"squash"}'
                            """

                            // Execute the curl command to merge the pull request
                            sh mergePRCommand
                        } else {
                            echo "No pull request information found. This might not be a pull request build."
                        }
                    }
                }
                failure {
                    script {
                        echo "Jenkins CI pipeline failed."
                        def currentSHA = env.GIT_COMMIT
                            setBuildStatus("Build failed", "FAILURE");
                            echo """
                                curl -L \
                                -X POST \
                                -H "Accept: application/vnd.github+json" \
                                -H "Authorization: Bearer ${TOKEN}" \
                                -H "X-GitHub-Api-Version: 2022-11-28" \
                                https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                -d '{"state":"failure","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                "description":"The build failured!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                            """
                            // Now, execute the curl command
                            sh """
                                curl -L \
                                    -X POST \
                                    -H "Accept: application/vnd.github+json" \
                                    -H "Authorization: Bearer ${TOKEN}" \
                                    -H "X-GitHub-Api-Version: 2022-11-28" \
                                    https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                    -d '{"state":"failure","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                    "description":"The build failured!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                            """
                        // }
                    }
                }
                always {
                    echo "This will always run."
                    // Add more logging or actions here
                }
            }
        
        }

        stage('Finalized') {
            steps {
                echo "Finalized..."
            }
        }

    }
}