// void setBuildStatus(String message, String context, String state) {
//   // add a Github access token as a global 'secret text' credential on Jenkins with the id 'github-commit-status-token'
//     withCredentials([string(credentialsId: 'git-token', variable: 'TOKEN')]) {
//       // 'set -x' for debugging. Don't worry the access token won't be actually logged
//       // Also, the sh command actually executed is not properly logged, it will be further escaped when written to the log
//         def check = sh """
//             set -x
//             curl \"https://api.github.com/repos/org/repo/statuses/$GIT_COMMIT?access_token=$TOKEN\" \
//                 -H \"Content-Type: application/json\" \
//                 -X POST \
//                 -d \"{\\\"description\\\": \\\"$message\\\", \\\"state\\\": \\\"$state\\\", \\\"context\\\": \\\"$context\\\", \\\"target_url\\\": \\\"$BUILD_URL\\\"}\"
//         """

//         echo "def check - ${check}"
//     } 
// }


void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Mykyta-Lystopad/homework.git"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

// vars 5555
def container_name = "homework"
def image_path = "nominonik/google-class"


pipeline {
    agent {
        label 'docker'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: 'dev\nqa', description: 'Select the target environment')
        string(name: 'PUSH_VERSION', defaultValue: '2.3', description: 'Enter the version or tag of the Docker image for build image')
        string(name: 'PULL_VERSION', defaultValue: 'latest', description: 'Enter the version or tag of the Docker image for deploy job')
    }


    options {
      withCredentials([
        usernamePassword(credentialsId: "docker_hub", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')
      ])
    }


    stages {
    //     // stage('Block Pull Request Stage') {
    //     //     steps {
    //     //         setBuildStatus("Compiling", "compile", "pending")
    //     //         script {
    //     //             try {
    //     //                 // do the build here
    //     //                 setBuildStatus("Build complete", "compile", "success")
    //     //             } catch (err) {
    //     //                 setBuildStatus("Failed", "pl-compile", "failure")
    //     //                 throw err
    //     //             }
    //     //         }
    //     //     }
    //     // }

    //     stage('Clone Repository') {
    //         steps {
    //             dir("${container_name}_dir") {
    //                 git(
    //                     url: "https://github.com/Mykyta-Lystopad/${container_name}.git",
    //                     branch: "main",
    //                     changelog: true,
    //                     poll: true
    //                 )
    //             }
    //         }
    //     }

    //     stage('Static Code Analysis') {
    //         steps {
    //             echo "Run SonarQube analysis"
    //             withSonarQubeEnv(installationName: 'SonarQube') {
    //                 script {
    //                     def scannerHome = tool 'SonarScanner';
    //                     withEnv(["PATH+SONARSCANNER=${scannerHome}/bin"]) {
    //                         sh "sonar-scanner"
    //                     }
    //                 }
    //             }
    //         }
    //     }

    //     stage('Build Docker Image') {
    //         steps {
    //         sh "sudo docker build -t ${image_path}-${params.ENVIRONMENT}:latest ."
    //         }
           
    //     }

    //     stage('Tag Docker Image') {
    //         steps {
    //             script {
    //                 sh "sudo docker tag ${image_path}-${params.ENVIRONMENT}:latest \
    //                 ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}"

    //             }
    //         }
    //     }

    //     stage('Push Docker Image to Docker Hub') {
    //         steps {
    //             script {
    //                 def scriptPushVar

    //                 scriptPushVar = "sudo docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}; \
    //                     sudo docker push ${image_path}-${params.ENVIRONMENT}:latest; \
    //                     sudo docker push ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}"

    //                 sh(script: scriptPushVar, returnStatus: false, returnStdout: true)
    //             }
    //             timeout(time: 7, unit: 'DAYS') {
    //                 input message: "Approve the deployment to ${params.ENVIRONMENT} environment with version latest?", ok: 'Deploy'
    //             }
    //         }
           
    //     }

    //     stage('Deploy to Environment') {
    //         when {
    //             expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
    //         }
    //         steps {
    //             script {
    //                 echo "Deploying to environment: ${params.ENVIRONMENT} with version: latest"

    //                 // Pull the Docker image from Docker Hub
    //                 sh "docker pull ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}"
    //                 // Remove old container "homework"
    //                 sh "docker rm -f ${container_name}"
    //                 // Run container
    //                 sh "docker run -d -p 4200:4200 --name ${container_name} ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION} npm start"

    //             }

    //         }
    //     }

        stage('Health Check') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    echo "Performing health check for environment: ${params.ENVIRONMENT}"
                    // def response_command
                    // def response
                    // def response = sh(script: "curl -s -o /dev/null -w %{http_code} http://192.168.0.139:4200")
                    // def response = sh(script: "curl -I -s http://192.168.0.139:4200 | grep -i "HTTP/1.1" | cut -d' ' -f2")
                    // response_command = "curl -I -s http://192.168.0.139:4200 | grep -i 'HTTP/1.1' | cut -d' ' -f2"

                    int response_status = sh(script: "curl -sLI -w '%{http_code}' http://192.168.0.139:4200 -o /dev/null", returnStdout: true)

                    echo "response_status = ${response_status}"

                    // response = sh(script: response_command, returnresponse_status: true)

                    // sh "hostname -I"
                    // sh "cat /etc/os-release"

                    // sh "ls -la"

                    // sh "pwd"

                    // response=$("curl -s -o /dev/null -w %{http_code http://192.168.0.139:4200")


                    // response = httpRequest 'http://localhost:8080/jenkins/api/json?pretty=true'
                    //     println("response_status: "+response.response_status)
                    //     println("Content: "+response.content)

                    // def respons2 = httpRequest 'http://192.168.0.139:4200/jenkins/api/json?pretty=true'
                    //     println("response_status: "+response-2.response_status)
                    //     println("Content: "+response-2.content)

                    // sh "touch helth_check.sh"
                    // echo "curl -I -s http://192.168.0.139:4200 | grep -i 'HTTP/1.1' | cut -d' ' -f2"
                    // sh "chmod +x ~/helth_check-1.sh"
                    // response_2 = sh "bash ~/helth_check-1.sh"
                     
                    // sh "bash ~/helth_check-1.sh"

                    // echo "Response code: ${response}"
                    // echo "Response code: ${response_2}"

                    if (response_status == 200) {
                        echo "Health check passed with response code ${response_status}."
                    } else {
                        echo "Health check failed with response code ${response_status}."

                    }

                }

            }
        }

        // stage('Block Pull Request Stage') {
        //     steps {
        //         setBuildStatus("Compiling", "compile", "pending")
        //         script {
        //             echo "script"
        //             try {
        //                 // do the build here
        //                 echo "try"
        //                 setBuildStatus("Build complete", "compile", "success")
        //             } catch (err) {
        //                 echo "catch"
        //                 setBuildStatus("Failed", "pl-compile", "failure")
        //                 throw err
        //             }
        //         }
        //     }
        // }

    }

    post {
            success{
                setBuildStatus("Build succeeded", "SUCCESS");
            }

            failure {
                setBuildStatus("Build failed", "FAILURE");
            } 
    }


    
}