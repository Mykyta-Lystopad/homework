void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Mykyta-Lystopad/homework.git"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

// vars
def container_name = "homework"
def image_path = "nominonik/google-class"
def build_status


pipeline {
    agent {
        label 'docker'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: 'dev\nqa', description: 'Select the target environment')
        string(name: 'PUSH_VERSION', defaultValue: '2.3', description: 'Enter the version or tag of the Docker image for build image')
        string(name: 'PULL_VERSION', defaultValue: 'latest', description: 'Enter the version or tag of the Docker image for deploy job')
    }


    options {
      withCredentials([
        usernamePassword(credentialsId: "docker_hub", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')
      ])
    }


    stages {

        stage('Clone Repository') {
            steps {
                dir("${container_name}_dir") {
                    git(
                        url: "https://github.com/Mykyta-Lystopad/${container_name}.git",
                        branch: "main",
                        changelog: true,
                        poll: true
                    )
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo "Run SonarQube analysis"
                withSonarQubeEnv(installationName: 'SonarQube') {
                    script {
                        def scannerHome = tool 'SonarScanner';
                        withEnv(["PATH+SONARSCANNER=${scannerHome}/bin"]) {
                            sh "sonar-scanner"
                        }
                    }
                }
            }
        }

        // stage('Build Docker Image') {
        //     steps {
        //         sh "sudo docker build -t ${image_path}-${params.ENVIRONMENT}:latest ."
        //     }
           
        // }

        // stage('Tag Docker Image') {
        //     steps {
        //         script {
        //             sh "sudo docker tag ${image_path}-${params.ENVIRONMENT}:latest \
        //             ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}"

        //         }
        //     }
        // }

        // stage('Push Docker Image to Docker Hub') {
        //     steps {
        //         script {
        //             def scriptPushVar

        //             scriptPushVar = "sudo docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}; \
        //                 sudo docker push ${image_path}-${params.ENVIRONMENT}:latest; \
        //                 sudo docker push ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}"

        //             sh(script: scriptPushVar, returnStatus: false, returnStdout: true)
        //         }
        //         timeout(time: 7, unit: 'DAYS') {
        //             input message: "Approve the deployment to ${params.ENVIRONMENT} environment with version latest?", ok: 'Deploy'
        //         }
        //     }
           
        // }

        stage('Deploy to Environment') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    echo "Deploying to environment: ${params.ENVIRONMENT} with version: latest"

                    // Pull the Docker image from Docker Hub
                    sh "docker pull ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION}"
                    // Remove old container "homework"
                    sh "docker rm -f ${container_name}"
                    // Run container
                    sh "docker run -d -p 4200:4200 --name ${container_name} ${image_path}-${params.ENVIRONMENT}:${params.PUSH_VERSION} npm start"

                    sh "sleep 40"

                }

            }
        }

        stage('Health Check') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    echo "Performing health check for environment: ${params.ENVIRONMENT}"

                    def response_status = sh(script: "curl -sLI -w '%{http_code}' http://192.168.0.139:4200 -o /dev/null", returnStdout: true)

                    echo "response_status = ${response_status}"

                    if (response_status == '200') {
                        echo "Health check passed with response code ${response_status}."
                    } else {
                        echo "Health check failed with response code ${response_status}."

                    }

                }

            }
        }


    }
    
    // Use for PR status sending
    post {
            success{
                build_status = setBuildStatus("Build succeeded", "SUCCESS");
            }

            failure {
                build_status = setBuildStatus("Build failed", "FAILURE");
            } 
    }

    // Sending notification to gmail
    post{
        always{
            mail to: "niktoring77@gmail.com",
            subject: "Email froom Jenkins pipeline",
            body: "Logs from Jenkins pipeline"
        }
    }


    
}