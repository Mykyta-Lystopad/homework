// vars
// image_path - in docker hub (default folder for generel images: 1-with version and latest)
def image_path = "nominonik/google-class"
def image_part_name = "google-class"
def container_name = "homework"


pipeline {
    agent {
        label 'docker'
    }

    parameters {
        string(name: 'PUSH_VERSION', defaultValue: '2.4.3', description: 'Enter the version or tag of the Docker image for build image')
    }


    options {
      withCredentials([
        usernamePassword(credentialsId: "docker_hub", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME'),
        string(credentialsId: 'git-token-2', variable: 'TOKEN')
      ])
    }

    environment {
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
    }


    stages {
        // stage('Cleaning workspace') {
        //     steps {
        //         print("Starting preconfiguration cleaning...")
        //         deleteDir()
        //     }
        // }

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        // stage('Check all envs') {
        //     steps {
        //         sh 'printenv'
        //     }
        // }

        // stage('Pulling from git branch') {
        //     steps {
        //         script {
        //             // Access the branch name using env.BRANCH_NAME
        //             echo "Current branch is: ${BRANCH_NAME}"
        //             echo "Cloning repo from the branch: ${BRANCH_NAME}..."
        //         }
        //     }
        // }


        // stage('Clone Repository') {
        //     steps {
        //         dir("${container_name}_dir") {
        //             git(
        //                 url: "https://github.com/Mykyta-Lystopad/${container_name}.git",
        //                 branch: "main",
        //                 changelog: true,
        //                 poll: true
        //             )
        //         }
        //     }
        // }

        // stage('Static Code Analysis') {
        //     steps {
        //         echo "Run SonarQube analysis"
        //         withSonarQubeEnv(installationName: 'SonarQube') {
        //             script {
        //                 def scannerHome = tool 'SonarScanner';
        //                 withEnv(["PATH+SONARSCANNER=${scannerHome}/bin"]) {
        //                     sh "sonar-scanner"
        //                 }
        //             }
        //         }
        //     }
        // }

        // stage('Build Docker Image') {
        //     steps {
        //         sh "docker build -t ${image_path}:${image_part_name}-latest ."
        //     }
           
        // }

        // stage('Tag Docker Image') {
        //     steps {
        //         script {
        //             // + docker tag nominonik/google-class:google-class-latest nominonik/google-class:google-class-2.4-201
        //             sh "docker tag ${image_path}:${image_part_name}-latest \
        //             ${image_path}:${image_part_name}-${params.PUSH_VERSION}-${env.BUILD_NUMBER}"

        //         }
        //     }
        // }

        // stage('Push Docker Image to Docker Hub') {
        //     steps {
        //         script {
        //             def scriptPushVar

        //             scriptPushVar = "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}; \
        //                 docker push ${image_path}:${image_part_name}-latest; \
        //                 docker push ${image_path}:${image_part_name}-${params.PUSH_VERSION}-${env.BUILD_NUMBER}"

        //             sh(script: scriptPushVar, returnStatus: false, returnStdout: true)

                    
        //             // // Prompt the user to read linting message
        //             // def userInput = input(
        //             //     message: 'Do you want to read the linting message?',
        //             //     ok: 'Yes',
        //             //     parameters: [string(defaultValue: 'No', description: 'Select Yes to read the linting message', name: 'readLintMessage')]
        //             // )

        //             // // Handle user input
        //             // if (userInput == 'Yes') {
        //             //     echo "User wants to read the linting message."
        //             // } else {
        //             //     echo "User chose not to read the linting message."
        //             // }
        //         }
        //             // timeout(time: 7, unit: 'DAYS') {
        //             //     input message: "Approve the deployment to ${params.ENVIRONMENT} environment with version latest?", ok: 'Deploy'
        //             // }
        //     }

        // }

       // Include shared stages
        // stage('Shared Stages') {
        //     steps {
        //         script {
        //             echo "WORKSPACE: ${WORKSPACE}"
        //             def scriptPath = "${WORKSPACE}/sharedPipeline.groovy"
        //             echo "Checking if file exists: ${scriptPath}"

        //             echo "Contents of the workspace directory:"
        //             sh 'ls -la /var/lib/jenkins/workspace/ci-pipeline'
                    
        //             // Check if the file exists
        //             if (fileExists(scriptPath)) {
        //                 echo "File exists!"
                        
        //                 // Load the script
        //                 def sharedPipeline = load "${WORKSPACE}/sharedPipeline.groovy"
                        
        //                 // Check if sharedPipeline is not null
        //                 if (sharedPipeline) {
        //                     // Invoke the sharedStages method
        //                     sharedPipeline.sharedStages_test()
        //                     sharedPipeline.sharedStages()
        //                 } else {
        //                     error "Failed to load shared pipeline script!"
        //                 }
        //             } else {
        //                 echo "File does not exist!"
        //                 error "Shared pipeline script not found!"
        //             }
        //         }
        //     }
        // }


        stage('Invoke cd_pipeline') {
            
            steps {
                echo "Invoke cd_pipeline for visibility latest image"
                script {
                    echo "The pipeline will be interrupted because it would start automatically." 
                }
                
            }
            post {
                success {
                    script {
                        echo 'Jenkins CI pipeline succeeded. Triggering Jenkins CD pipeline.'
                        build job: 'cd_pipeline', parameters: [
                            booleanParam(name: 'AUTOMATICALLY', value: true)
                        ]

                        if (env.CHANGE_ID) {
                            // This build is associated with a pull request
                            def currentSHA = env.GIT_COMMIT
                                // setBuildStatus("Build succeeded", "SUCCESS");
                                sh """
                                    curl -L \
                                        -X POST \
                                        -H "Accept: application/vnd.github+json" \
                                        -H "Authorization: Bearer ${TOKEN}" \
                                        -H "X-GitHub-Api-Version: 2022-11-28" \
                                        https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                        -d '{"state":"success","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                        "description":"The build:${currentBuild.currentResult}!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                                """
                        }
                    }
                }
                failure {
                    echo "Jenkins CI pipeline failed."
                    script {
                        if (env.CHANGE_ID) {
                            // This build is associated with a pull request
                            def currentSHA = env.GIT_COMMIT
                                // setBuildStatus("Build failed", "FAILURE");
                                sh """
                                    curl -L \
                                        -X POST \
                                        -H "Accept: application/vnd.github+json" \
                                        -H "Authorization: Bearer ${TOKEN}" \
                                        -H "X-GitHub-Api-Version: 2022-11-28" \
                                        https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                        -d '{"state":"failured","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                        "description":"The build:${currentBuild.currentResult}!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                                """
                        }
                    }
                }
                always {
                    echo "This will always run."
                    // Add more logging or actions here
                }
            }
        
        }

        stage('Finalized') {
            steps {
                echo "Finalized..."
            }
        }

    }
}


