void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/Mykyta-Lystopad/homework.git"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}


// vars
// image_path - in docker hub (default folder for generel images: 1-with version and latest)
def image_path = "nominonik/google-class"
def image_part_name = "google-class"
def container_name = "homework"


pipeline {
    agent {
        label 'docker'
    }

    parameters {
        string(name: 'PUSH_VERSION', defaultValue: '2.4.3', description: 'Enter the version or tag of the Docker image for build image')
    }


    options {
      withCredentials([
        usernamePassword(credentialsId: "docker_hub", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME'),
        string(credentialsId: 'git-token-2', variable: 'TOKEN')
      ])
    }


    stages {

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    echo "Checkout stage"
					checkout scmGit(branches: [[name: GITHUB_PR_SOURCE_BRANCH]], userRemoteConfigs: [[url: 'https://github.com/Mykyta-Lystopad/homework.git']])
                }
            }
        }

        stage('Clone Repository') {
            steps {
                dir("${container_name}_dir") {
                    git(
                        url: "https://github.com/Mykyta-Lystopad/${container_name}.git",
                        branch: "${GITHUB_PR_SOURCE_BRANCH}",
                        changelog: true,
                        poll: true
                    )
                }
            }
        }

       stage("Lint Dockerfile") {
         
            steps {
                script {
                    echo "Lint Dockerfile Stage"
                    echo "JENKINS_HOME: ${JENKINS_HOME}"
                    echo "JOB_NAME: ${JOB_NAME}"
                    echo "WORKSPACE: ${WORKSPACE}"
                    
                    def workspacePath = "${WORKSPACE}"
                    def dockerfilePath = "${workspacePath}/Dockerfile"
                    def lintResultFile = "${workspacePath}/hadolint_result.txt"

                    echo "dockerfilePath: ${dockerfilePath}  lintResultFile: ${lintResultFile}"

                    if (fileExists(dockerfilePath)) {

                        echo "Dockerfile found at: ${dockerfilePath}"

                        sh "touch ${lintResultFile}"

                        writeFile file: "${lintResultFile}", text: '============ Executing: hadolintCommand ==============='
                       
                        def hadolintBinary = sh(script: 'which hadolint', returnStdout: true).trim()
                        echo "Path to hadolint: ${hadolintBinary}"
                        
                        def hadolintCommand = "${hadolintBinary} ${dockerfilePath}"
                        echo "Executing: ${hadolintCommand}"
                        
                        sh(script: "${hadolintCommand} >> ${lintResultFile}", returnStatus: true)
                        
                        archiveArtifacts artifacts: "hadolint_result.txt", onlyIfSuccessful: false

                    } else {
                        error "Dockerfile not found at path: ${dockerfilePath}"
                    }
                }
            }
        }

        // stage('Static Code Analysis') {
        //     steps {
        //         echo "Run SonarQube analysis"
        //         withSonarQubeEnv(installationName: 'SonarQube') {
        //             script {
        //                 def scannerHome = tool 'SonarScanner';
        //                 withEnv(["PATH+SONARSCANNER=${scannerHome}/bin"]) {
        //                     sh "sonar-scanner"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${image_path}:${image_part_name}-latest ."
            }
           
        }

        stage('Tag Docker Image') {
            steps {
                script {
                    // + docker tag nominonik/google-class:google-class-latest nominonik/google-class:google-class-2.4-201
                    sh "docker tag ${image_path}:${image_part_name}-latest \
                    ${image_path}:${image_part_name}-${params.PUSH_VERSION}-${env.BUILD_NUMBER}"

                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    def scriptPushVar

                    scriptPushVar = "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}; \
                        docker push ${image_path}:${image_part_name}-latest; \
                        docker push ${image_path}:${image_part_name}-${params.PUSH_VERSION}-${env.BUILD_NUMBER}"

                    sh(script: scriptPushVar, returnStatus: false, returnStdout: true)
                }
            }

        }

        stage('Trigger github current branch and block untill build will not pass success') {
            
            steps {
                echo "Trigger github"
                script {
                    echo "Trigger github..." 
                }
                
            }
            post {
                success {
                    script {
                        echo "Jenkins CI pipeline succeeded."
                        def currentSHA = env.GIT_COMMIT
                            setBuildStatus("Build succeeded", "SUCCESS");
                            echo """
                                curl -L \
                                -X POST \
                                -H "Accept: application/vnd.github+json" \
                                -H "Authorization: Bearer ${TOKEN}" \
                                -H "X-GitHub-Api-Version: 2022-11-28" \
                                https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                -d '{"state":"success","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                "description":"The build succeeded!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                            """
                            // Now, execute the curl command
                            sh """
                                curl -L \
                                    -X POST \
                                    -H "Accept: application/vnd.github+json" \
                                    -H "Authorization: Bearer ${TOKEN}" \
                                    -H "X-GitHub-Api-Version: 2022-11-28" \
                                    https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                    -d '{"state":"success","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                    "description":"The build succeeded!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                            """
                        // }
                    }
                }
                failure {
                    script {
                        echo "Jenkins CI pipeline failed."
                        def currentSHA = env.GIT_COMMIT
                            setBuildStatus("Build failed", "FAILURE");
                            echo """
                                curl -L \
                                -X POST \
                                -H "Accept: application/vnd.github+json" \
                                -H "Authorization: Bearer ${TOKEN}" \
                                -H "X-GitHub-Api-Version: 2022-11-28" \
                                https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                -d '{"state":"failure","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                "description":"The build failured!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                            """
                            // Now, execute the curl command
                            sh """
                                curl -L \
                                    -X POST \
                                    -H "Accept: application/vnd.github+json" \
                                    -H "Authorization: Bearer ${TOKEN}" \
                                    -H "X-GitHub-Api-Version: 2022-11-28" \
                                    https://api.github.com/repos/Mykyta-Lystopad/homework/statuses/${currentSHA} \
                                    -d '{"state":"failure","target_url":"https://Mykyta-Lystopad/homework/build/status", \
                                    "description":"The build failured!","context":"continuous-integration/jenkins:${env.JOB_NAME}"}'
                            """
                        // }
                    }
                }
                always {
                    echo "This will always run."
                    // Add more logging or actions here
                }
            }
        
        }

    }
}