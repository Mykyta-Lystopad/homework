pipeline {
    agent {
        label 'docker'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: 'dev\nqa', description: 'Select the target environment')
        string(name: 'VERSION', defaultValue: 'latest', description: 'Enter the version or tag of the Docker image')
    }

    stages {
        stage('Clone Repository') {
            steps {
                dir("homework_dir") {
                    git(
                        url: "https://github.com/Mykyta-Lystopad/homework.git",
                        branch: "main",
                        changelog: true,
                        poll: true
                    )
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo "Run SonarQube analysis"
                withSonarQubeEnv(installationName: 'SonarQube') {
                    script {
                        def scannerHome = tool 'SonarScanner';
                        withEnv(["PATH+SONARSCANNER=${scannerHome}/bin"]) {
                            sh "sonar-scanner"
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build a Docker image
                // Use a Dockerfile and specify the image name and tag
                sh 'sudo docker build -t nominonik/google-class:latest .'
            }
        }

        stage('Tag Docker Image') {
            steps {
                // Tag the Docker image with a specific version
                sh 'sudo docker tag nominonik/google-class:latest nominonik/google-class:${params.VERSION}'
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                // Authenticate with Docker Hub (you may need to set up credentials)
                sh 'sudo docker login -u nominonik -p swe32!@ASE'

                // Push the Docker image to Docker Hub
                sh 'sudo docker push nominonik/google-class:latest'
                sh 'sudo docker push nominonik/google-class:${params.VERSION}'
            }
        }

        stage('Deploy to Environment') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    def env = params.ENVIRONMENT
                    def version = params.VERSION
                    echo "Deploying to environment: ${env} with version: latest"

                    // Pull the Docker image from Docker Hub
                    sh "docker pull nominonik/google-class:${version}"

                    // Run npm install and npm start inside the Docker container
                    sh "docker run -d --name homework nominonik/google-class:latest npm install"
                    sh "docker exec -it homework npm install"
                    sh "docker exec -it homework npm start"
                    
                    // Add other deployment tasks as needed
                }
                timeout(time: 7, unit: 'DAYS') {
                    input message: "Approve the deployment to ${env} with version latest?", ok: 'Deploy'
                }
            }
        }
    }
}
